/*************
描述
计算概论班的同学发明了一种新的文本加密算法--将文本转化为十进制数并回型存放到矩阵里。 
使用者事先约定好矩阵的行数与列数，并且规定文本中仅有大写字母和空格。他们事先按照这样的方法对文本进行编码： 
空格 = 00 
A = 01 
B = 02 
C = 03 
...... 
Y = 25 
Z = 26 
然后，然后按照回型遍历的方法，将每个字符对应编码的2位十进制数依次填入矩阵中，多出来的位置使用0补充。例如，对于信息“PKU”，在矩阵行列数均是3的情况下，填充结果为： 
 
再按照正常遍历顺序将矩阵中的数字连起来，完成加密过程。也就是上述例子中的信息最终会被加密为： 
161001012
关于输入
第一行为两个整数R和C，中间用一个空格隔开，分别表示行数和列数，其中1≤R, C≤10 
第二行为一个只包含大写字母和空格的字符串，不会以空格开头。1≤字符串长度≤(R * C) / 2
关于输出
一行，为加密后的十进制串
例子输入
3 3

PKU
例子输出
161001012
提示
注意：前导0也要输出
**********/
#include <iostream>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <cstdio>
#include <iomanip>
#define MAX 2147483647
using namespace std;
int main(){
    int R,C;
    cin>>R>>C;
    cin.get();
    char str[100];
    cin.getline(str,100);
    int arr[15][15]={0};
    int len=strlen(str);
    int arr1[300]={0};
    int j=0;
    for(int i=0;i<len;++i){
        if(str[i]>='A' && str[i]<='Z'){
            int tmp=str[i]-'A'+1;
            if(tmp>=0 && tmp<=9){
                arr1[j]=0;
                arr1[j+1]=tmp;
                j+=2;
            }else{
                arr1[j+1]=tmp%10;
                tmp/=10;
                arr1[j]=tmp;
                j+=2;
            }
        }
        if(str[i]==' '){
            arr1[j]=0;
            arr1[j+1]=0;
            j+=2;
        }
    }
    int p=0,q=-1,l=0;
    int cnt=0;
    int time=1;
    int R1=R,C1=C;
    R--;
    while(cnt<=R1*C1){
        if(time%4==1){
            for(int i=0;i<C;++i){
                arr[p][++q]=arr1[l++];
                cnt++;
            }
            C--;
            time++;
        }
        if(cnt==R1*C1)break;
        if(time%4==2){
            for(int i=0;i<R;++i){
                arr[++p][q]=arr1[l++];
                cnt++;
            }
            R--;
            time++;
        }
        if(cnt==R1*C1)break;
        if(time%4==3){
            for(int i=0;i<C;++i){
                arr[p][--q]=arr1[l++];
                cnt++;
            }
            C--;
            time++;
        }
        if(cnt==R1*C1)break;
        if(time%4==0){
            for(int i=0;i<R;++i){
                arr[--p][q]=arr1[l++];
                cnt++;
            }
            R--;
            time++;
        }
    }
    for(int i=0;i<R1;++i){
        for(int k=0;k<C1;++k){
            cout<<arr[i][k];
        }
    }
    return 0;
}
