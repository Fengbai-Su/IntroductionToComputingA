/**********
描述
一张画布里有n行*m列个格子，其中有的格子里有颜色填充，有的格子是空的没有颜色填充。现在需要你写一个程序来数出画布里边有颜色填充的格子构成了多少个图案，其中图案的定义为： 

如果两个有颜色的格子边相邻或者角相邻（即横、纵两个方向上的位置差都不超过1），则他们属于同一个图案。
关于输入
第一行为两个整数n和m（1<=n, m<=200）。 
之后的n行，每行为一个长度为m的字符串，构成了整个画布。字符串中，#表示颜色，-表示空白。
关于输出
一个整数，表示图案的个数
例子输入
19 48

------------------------------------------------

---####-----#-----#----------------------####---

--######----#-----#---------------------######--

-########--#-#---#-#####--#-##-##---#--########-

-###--###--#-#---#-#----#-##-##--#--#--###--###-

-###--###--#--#-#--######-#--#---#-#---###--###-

-########--#--#-#--#------#--#----##---########-

--######---#---#---######-#--#-----#----######--

---####----------------------------#-----####---

----------------------------------#-------------

------------------------------------------------

---###--#--------#------#-----------------------

--#---#-#---------------#-----------------------

-#------#-##--#-##--##-###-#-##-###--###-#--##--

-#------##--#-##-#-#----#--##--#---##---##-#----

-#------#---#-#--#--#---#--#---#---##----#--#---

--#---#-#---#-#--#---#--#--#---#---##---##---#--

---###--#---#-#--#-##---#--#---#---#-###-#-##---

------------------------------------------------
例子输出
12
********/
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <algorithm>
using namespace std;
int n,m,cnt=0;
char str[205][205];
bool flag[205][205]={false};
int visit(int p,int q){
    if(str[p][q]=='#' && flag[p][q]==false){
        flag[p][q]=true;
        if(p>0)visit(p-1,q);
        if(p<n-1)visit(p+1,q);
        if(q>0)visit(p,q-1);
        if(q<m-1)visit(p,q+1);
        if(p>0 && q>0)visit(p-1,q-1);
        if(p>0 && q<m-1)visit(p-1,q+1);
        if(p<n-1 && q>0)visit(p+1,q-1);
        if(p<n-1 && q<m-1)visit(p+1,q+1);
    }
    return 0;
}
int main(){
    cin>>n>>m;
    for(int i=0;i<n;++i){
        for(int j=0;j<m;++j){
            cin>>str[i][j];
        }
    }
    for(int i=0;i<n;++i){
        for(int j=0;j<m;++j){
            if(str[i][j]=='#' && flag[i][j]==false){
                visit(i,j);
                cnt++;
            }
        }
    }
    cout<<cnt;
    return 0;
}
