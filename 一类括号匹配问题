/**********
描述
在程序设计中，常常使用小括号强调表达式的运算顺序，但是，左右小括号必须匹配。现给定一个不多于500个符号的表达式（串），其中可能存在多个小括号，想检查小括号的匹配问题。如果存在小括号不匹配，则输出 mismatch；如果所有小括号匹配，则按左右括号的匹配距离由小到大输出左、右括号的位置；若多个匹配的距离相等，则左括号先出现的匹配先输出；如果整个串中没有小括号，则左右位置均输出0，即 0,0； ，规定，串中第一个符号的位置为1。 
匹配距离=右括号位置 - 左括号位置。 

例如： 
输入为：    (x+y*(z-5)*(x+y))*(x+98) 
输出为： 
6,10 
12,16 
19,24 
1,17 
如果输入为  (x+y*(z-5))*x+y) 
则不匹配，因为在最后的反括号没有相匹配的正括号。因此，输出： 
mismatch
关于输入
一串符号
关于输出
按匹配距离的增序输出匹配对的左右位置，逗号间隔；如果距离相同，则按左括号出现的先后顺序输出；如果整个序列中出现不匹配现象，则输出 mismatch； 

例子输入
(x+y*(z-5)*(x+y))*(x+98)
例子输出
6,10

12,16

19,24

1,17
************/
#include <iostream>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <cstdio>
#include <iomanip>
#define MAX 2147483647
using namespace std;
struct coup{
    int x;
    int y;
    int dist;
};
int main(){
    char str[505];
    cin.getline(str,505);
    int len=strlen(str);
    int arr[505]={0};
    int cnt1=0,cnt2=0;
    for(int i=0;i<len;++i){
        if(str[i]=='('){
            cnt1++;
            arr[i+1]=1;
        }
        if(str[i]==')'){
            cnt2++;
            arr[i+1]=2;
        }
    }
    if(cnt1==0 && cnt2==0){
        cout<<0<<','<<0;
        return 0;
    }
    if(cnt1!=cnt2){
        cout<<"mismatch";
        return 0;
    }
    bool flag[505]={0};
    coup arr1[505];
    int j=0,k=0;
    for(int m=0;m<cnt1;++m)
    for(int i=1;i<len+1;++i){
        if(arr[i]==1 && flag[i]==0){
            for(j=i+1;j<len+1;++j){
                if(arr[j]==1 && flag[j]==0){
                    i=j-1;
                    break;
                }
                if(arr[j]==2 && flag[j]==0){
                    arr1[k].x=i;
                    arr1[k].y=j;
                    arr1[k].dist=j-i;
                    flag[i]=true;
                    flag[j]=true;
                    k++;
                    break;
                }
            }
            if(j==len+1){
                cout<<"mismatch";
                return 0;
            }
        }
    }
    for(int i=0;i<k-1;++i){
        for(j=0;j<k-1-i;++j){
            if(arr1[j].dist>arr1[j+1].dist || ((arr1[j].dist==arr1[j+1].dist) && (arr1[j].x>arr1[j+1].x))){
                coup tmp=arr1[j];
                arr1[j]=arr1[j+1];
                arr1[j+1]=tmp;
            }
        }
    }
    for(int i=0;i<k;++i){
        cout<<arr1[i].x<<','<<arr1[i].y<<endl;
    }
    return 0;
}
