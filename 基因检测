/*********
来源	计算概论05
描述
用一个字符串表示一段基因，例如：“CTATGGGTTT”。两段基因的相似度定义为它们所包含的最大公共子串的长度。例如：“CCTTGG”和“TGGGC”的最大公共子串为“TGG”，它的长度为3，则我们称“CCTTGG”和“TGGGC”的相似度为3。现给定两段基因，要求计算它们的相似度。
关于输入
输入第一行包含一个正整数N（0
关于输出
对于每组测试数据输出一行，该行包含一个整数，表示给定基因段的相似度。
例子输入
2

CCCCC TTTTTGGGGGCC

ACTGGG DDD

例子输出
2

0

提示
提示，这里表示基因的字母个数可能不只是C、T、A、G这四个字母。 

===关于输入=== 
用一个字符串表示一段基因，例如：“CTATGGGTTT”。两段基因的相似度定义为它们所包含的最大公共子串的长度。例如：“CCTTGG”和“TGGGC”的最大公共子串为“TGG”，它的长度为3，则我们称“CCTTGG”和“TGGGC”的相似度为3。现给定两段基因，要求计算它们的相似度。 

===关于输出=== 
对于每组测试数据输出一行，该行包含一个整数，表示给定基因段的相似度。
********/
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <algorithm>
using namespace std;
int dp[1000][1000]={0};
int main(){
    int t;
    cin>>t;
    for(int i=0;i<t;++i){
        char str1[1000],str2[1000];
        cin>>str1>>str2;
        memset(dp,0,sizeof(dp));
        int len1=strlen(str1);
        int len2=strlen(str2);
        for(int j=0;j<len1;++j){
            if(str1[j]==str2[0]){
                dp[0][j]=1;
            }
        }
        for(int i=0;i<len2;++i){
            if(str2[i]==str1[0]){
                dp[i][0]=1;
            }
        }
        for(int i=1;i<len2;++i){
            for(int j=1;j<len1;++j){
                if(str1[j]==str2[i]){
                    dp[i][j]=dp[i-1][j-1]+1;
                }
            }
        }
        int maxx=-1;
        for(int i=0;i<len2;++i){
            for(int j=0;j<len1;++j){
                if(dp[i][j]>maxx)maxx=dp[i][j];
            }
        }
        cout<<maxx<<endl;
    }
    return 0;
}
